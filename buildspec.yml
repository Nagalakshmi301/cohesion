version: 0.2
env:
  variables:
    AWS_REGION: eu-north-1
    FRONTEND_REPO: 890742562729.dkr.ecr.eu-north-1.amazonaws.com/production-frontend
    BACKEND_REPO: 890742562729.dkr.ecr.eu-north-1.amazonaws.com/production-backend
    EC2_USER: ubuntu
    EC2_IP: 13.60.239.64
    SECRET_NAME: ec2/ssh/private-key
    SSH_KEY_PATH: /root/.ssh/ec2-key.pem
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $FRONTEND_REPO
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $BACKEND_REPO
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo "Image tag is $IMAGE_TAG"
      - echo Installing jq...
      - yum install -y jq
      - echo "Setting up SSH key directory..."
      - mkdir -p /root/.ssh
      - echo "Retrieving SSH key from Secrets Manager..."
      - aws secretsmanager get-secret-value --secret-id $SECRET_NAME --query SecretString --output text > /tmp/raw_secret.json
      - echo "Extracting private key..."
      - cat /tmp/raw_secret.json | jq -r '.["private-key"]' > /tmp/one_line_key.txt
      - echo "Formatting SSH key..."
      - echo "-----BEGIN RSA PRIVATE KEY-----" > $SSH_KEY_PATH
      - cat /tmp/one_line_key.txt | sed 's/-----BEGIN RSA PRIVATE KEY-----//g' | sed 's/-----END RSA PRIVATE KEY-----//g' | tr -d ' ' | fold -w 64 >> $SSH_KEY_PATH
      - echo "-----END RSA PRIVATE KEY-----" >> $SSH_KEY_PATH
      - echo "Verifying key content..."
      - head -n 2 $SSH_KEY_PATH
      - echo "..."
      - tail -n 2 $SSH_KEY_PATH
      - echo "Setting key permissions..."
      - chmod 400 $SSH_KEY_PATH
      - echo "Testing key validity..."
      - ssh-keygen -y -P "" -f $SSH_KEY_PATH > /dev/null || { echo "Invalid private key format"; exit 1; }
  build:
    commands:
      - echo Building frontend image...
      - docker build -t $FRONTEND_REPO:$IMAGE_TAG ./frontend
      - echo Building backend image...
      - docker build -t $BACKEND_REPO:$IMAGE_TAG ./backend
  post_build:
    commands:
      - echo Pushing frontend image...
      - docker push $FRONTEND_REPO:$IMAGE_TAG
      - echo Pushing backend image...
      - docker push $BACKEND_REPO:$IMAGE_TAG
      - echo Writing imagedefinitions.json...
      - printf '[{"name":"frontend","imageUri":"%s"},{"name":"backend","imageUri":"%s"}]' $FRONTEND_REPO:$IMAGE_TAG $BACKEND_REPO:$IMAGE_TAG > imagedefinitions.json
      - echo "Creating deployment script..."
      - |
        cat > deploy.sh << EOF
        #!/bin/bash
        echo "Running deployment on EC2 for image tag: ${IMAGE_TAG}"
        echo "Logging in to ECR on EC2..."
        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 890742562729.dkr.ecr.eu-north-1.amazonaws.com
        echo "Pulling latest images..."
        docker pull 890742562729.dkr.ecr.eu-north-1.amazonaws.com/production-frontend:${IMAGE_TAG}
        docker pull 890742562729.dkr.ecr.eu-north-1.amazonaws.com/production-backend:${IMAGE_TAG}
        echo "Stopping and removing old containers..."
        docker rm -f frontend || true
        docker rm -f backend || true
        echo "Starting new containers..."
        docker run -d -p 8080:8080 --name frontend 890742562729.dkr.ecr.eu-north-1.amazonaws.com/production-frontend:${IMAGE_TAG}
        docker run -d -p 5000:5000 --name backend 890742562729.dkr.ecr.eu-north-1.amazonaws.com/production-backend:${IMAGE_TAG}
        EOF
      - chmod +x deploy.sh
      - echo "Testing SSH connection..."
      - ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o IdentityFile=$SSH_KEY_PATH $EC2_USER@$EC2_IP "echo SSH connection successful"
      - echo "Copying deployment script to EC2..."
      - scp -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o IdentityFile=$SSH_KEY_PATH deploy.sh $EC2_USER@$EC2_IP:/home/$EC2_USER/deploy.sh
      - echo "Running deployment script on EC2..."
      - ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o IdentityFile=$SSH_KEY_PATH $EC2_USER@$EC2_IP "chmod +x /home/$EC2_USER/deploy.sh && /home/$EC2_USER/deploy.sh"
artifacts:
  files:
    - imagedefinitions.json
